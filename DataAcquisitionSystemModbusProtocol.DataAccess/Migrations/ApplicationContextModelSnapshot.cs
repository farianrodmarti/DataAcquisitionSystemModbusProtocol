// <auto-generated />
using System;
using DataAcquisitionSystemModbusProtocol.DataAccess.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAcquisitionSystemModbusProtocol.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("Domain.Entities.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RedModbuss.RedModbus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModbusMasterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModbusMasterId")
                        .IsUnique();

                    b.ToTable("RedModbus", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Samples.Sample", b =>
                {
                    b.Property<Guid>("VariableId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SampleDateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("VariableId", "SampleDateTime");

                    b.ToTable("Sample", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Units.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Variables.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModbusProtocolDirection")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModbusSlaveId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SamplingPeriod")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariableType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModbusSlaveId");

                    b.HasIndex("UnitId");

                    b.ToTable("Variables", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Devices.ModbusMaster", b =>
                {
                    b.HasBaseType("Domain.Entities.Devices.Device");

                    b.ToTable("ModbusMasters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Devices.ModbusSlave", b =>
                {
                    b.HasBaseType("Domain.Entities.Devices.Device");

                    b.Property<Guid>("RedModbusId")
                        .HasColumnType("TEXT");

                    b.HasIndex("RedModbusId");

                    b.ToTable("ModbusSlaves", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Variables.AnalogicVariable", b =>
                {
                    b.HasBaseType("Domain.Entities.Variables.Variable");

                    b.ToTable("AnalogicVaruables", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Variables.DigitalVariable", b =>
                {
                    b.HasBaseType("Domain.Entities.Variables.Variable");

                    b.ToTable("DigitalVariables", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RedModbuss.RedModbus", b =>
                {
                    b.HasOne("Domain.Entities.Devices.ModbusMaster", "ModbusMasterRed")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.RedModbuss.RedModbus", "ModbusMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModbusMasterRed");
                });

            modelBuilder.Entity("Domain.Entities.Samples.Sample", b =>
                {
                    b.HasOne("Domain.Entities.Variables.Variable", "Variable")
                        .WithMany("Samples")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("Domain.Entities.Variables.Variable", b =>
                {
                    b.HasOne("Domain.Entities.Devices.ModbusSlave", "ModbusSlave")
                        .WithMany("Variables")
                        .HasForeignKey("ModbusSlaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Units.Unit", "Unit")
                        .WithMany("Variables")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModbusSlave");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.Entities.Devices.ModbusMaster", b =>
                {
                    b.HasOne("Domain.Entities.Devices.Device", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Devices.ModbusMaster", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Devices.ModbusSlave", b =>
                {
                    b.HasOne("Domain.Entities.Devices.Device", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Devices.ModbusSlave", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RedModbuss.RedModbus", "RedModbus")
                        .WithMany()
                        .HasForeignKey("RedModbusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RedModbus");
                });

            modelBuilder.Entity("Domain.Entities.Variables.AnalogicVariable", b =>
                {
                    b.HasOne("Domain.Entities.Variables.Variable", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Variables.AnalogicVariable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Variables.DigitalVariable", b =>
                {
                    b.HasOne("Domain.Entities.Variables.Variable", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Variables.DigitalVariable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Units.Unit", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Domain.Entities.Variables.Variable", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Domain.Entities.Devices.ModbusSlave", b =>
                {
                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
